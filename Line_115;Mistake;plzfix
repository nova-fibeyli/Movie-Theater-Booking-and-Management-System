import Data.List (nub, find)
import Data.Maybe (isNothing, fromMaybe)

-- Movie data structure
data Movie = Movie {
    movieId :: Int,
    title :: String,
    showtime :: String,
    ticketPrice :: Double
} deriving (Show)

-- Seat data structure
data Seat = Seat {
    seatId :: Int,
    row :: Char,
    number :: Int,
    availability :: Bool  -- True if available, False if booked
} deriving (Show)

-- Booking data structure
data Booking = Booking {
    bookingId :: Int,
    movie :: Movie,
    bookedSeats :: [Seat],  -- List of seats booked
    totalCost :: Double,    -- Total cost after discounts
    customerEmail :: String
} deriving (Show)

-- Representing a Promo Code and its discount value
type PromoCode = String
type Discount = Double

-- A map of promo codes to their discounts
promoCodes :: [(PromoCode, Discount)]
promoCodes = [("DISCOUNT10", 0.10), ("DISCOUNT20", 0.20), ("FREESHIP", 0.05)]

-- Book Seats for a Movie
bookSeats :: Movie -> [Seat] -> [Seat] -> PromoCode -> String -> Either String Booking
bookSeats movie availableSeats selectedSeats promoCode email =
    if any (not . availability) selectedSeats
        then Left "Some selected seats are already booked!"
        else if not (all (\s -> s `elem` availableSeats) selectedSeats)
            then Left "Some selected seats do not exist in this theater!"
            else Right (Booking {
                bookingId = generateBookingId,
                movie = movie,
                bookedSeats = selectedSeats,
                totalCost = calculateTotalCost selectedSeats promoCode,
                customerEmail = email
            })
    where
        -- Generate a unique booking ID
        generateBookingId = 1  -- A placeholder, should be generated dynamically

        -- Calculate the total cost based on the ticket price and promo code
        calculateTotalCost selectedSeats promoCode =
            let baseCost = fromIntegral (length selectedSeats) * ticketPrice movie
                discount = fromMaybe 0 (lookup promoCode promoCodes)
            in baseCost * (1 - discount)

-- Cancel Booking
cancelBooking :: [Booking] -> Int -> [Seat] -> Either String [Booking]
cancelBooking bookings bookingId seatsToRelease =
    case find (\b -> bookingId == bookingId b) bookings of
        Nothing -> Left "Booking not found!"
        Just booking -> Right (map releaseSeats bookings)
    where
        releaseSeats booking
            | bookingId booking == bookingId = booking { bookedSeats = releasedSeats }
            | otherwise = booking
        releasedSeats = map (\s -> s { availability = True }) (bookedSeats booking)

-- Check Seat Availability
checkSeatAvailability :: Movie -> [Seat] -> [Seat] -> Bool
checkSeatAvailability movie availableSeats selectedSeats =
    all (\s -> s `elem` availableSeats && availability s) selectedSeats

-- Apply Promotional Code
applyPromoCode :: PromoCode -> [Seat] -> Movie -> Double
applyPromoCode promoCode selectedSeats movie =
    let baseCost = fromIntegral (length selectedSeats) * ticketPrice movie
        discount = fromMaybe 0 (lookup promoCode promoCodes)
    in baseCost * (1 - discount)

-- Generate Movie Theater Statistics

-- Total revenue per movie
totalRevenue :: [Booking] -> Int -> Double
totalRevenue bookings movieId =
    sum [totalCost booking | booking <- bookings, movieId (movie booking) == movieId]

-- Total seats sold per movie
totalSeatsSold :: [Booking] -> Int -> Int
totalSeatsSold bookings movieId =
    sum [length (bookedSeats booking) | booking <- bookings, movieId (movie booking) == movieId]

-- Average booking cost per movie
averageBookingCost :: [Booking] -> Int -> Double
averageBookingCost bookings movieId =
    let relevantBookings = [booking | booking <- bookings, movieId (movie booking) == movieId]
        total = sum [totalCost booking | booking <- relevantBookings]
        count = length relevantBookings
    in if count == 0 then 0 else total / fromIntegral count

-- Example Usage:

-- Sample movie
movie1 = Movie 1 "The Great Adventure" "7:00 PM" 10.0

-- Sample seats
seats = [Seat 1 'A' 1 True, Seat 2 'A' 2 True, Seat 3 'A' 3 False, Seat 4 'B' 1 True]

-- Booking some seats
let bookingResult = bookSeats movie1 seats [Seat 1 'A' 1 True, Seat 2 'A' 2 True] "DISCOUNT10" "customer@example.com"
case bookingResult of
    Left err -> putStrLn err
    Right booking -> print booking

-- Cancelling a booking
let bookings = [Booking 1 movie1 [Seat 1 'A' 1 False, Seat 2 'A' 2 False] 18.0 "customer@example.com"]
let cancelResult = cancelBooking bookings 1 seats
case cancelResult of
    Left err -> putStrLn err
    Right updatedBookings -> print updatedBookings

-- Checking seat availability
let isAvailable = checkSeatAvailability movie1 seats [Seat 1 'A' 1 True, Seat 2 'A' 2 True]
print isAvailable

-- Applying a promo code
let promoAppliedCost = applyPromoCode "DISCOUNT20" [Seat 1 'A' 1 True, Seat 2 'A' 2 True] movie1
print promoAppliedCost

-- Movie theater statistics
let revenue = totalRevenue bookings 1
let seatsSold = totalSeatsSold bookings 1
let avgCost = averageBookingCost bookings 1
print revenue
print seatsSold
print avgCost
